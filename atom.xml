<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>房东家的鳄鱼</title>
  
  <subtitle>记录生活，积极向上</subtitle>
  <link href="https://zggnice.github.io/atom.xml" rel="self"/>
  
  <link href="https://zggnice.github.io/"/>
  <updated>2024-11-10T09:28:55.087Z</updated>
  <id>https://zggnice.github.io/</id>
  
  <author>
    <name>房东家的鳄鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://zggnice.github.io/posts/undefined.html"/>
    <id>https://zggnice.github.io/posts/undefined.html</id>
    <published>2024-11-12T06:48:42.748Z</published>
    <updated>2024-11-10T09:28:55.087Z</updated>
    
    <content type="html"><![CDATA[<p>##本单元目标<br>    一、为什么要学习数据库<br>    二、数据库的相关概念<br>        DBMS、DB、SQL<br>    三、数据库存储数据的特点<br>    四、初始MySQL<br>        MySQL产品的介绍<br>        MySQL产品的安装          ★<br>        MySQL服务的启动和停止     ★<br>        MySQL服务的登录和退出     ★<br>        MySQL的常见命令和语法规范<br>    五、DQL语言的学习   ★<br>        基础查询        ★<br>        条件查询     ★<br>        排序查询     ★<br>        常见函数        ★<br>        分组函数        ★<br>        分组查询   ★<br>        连接查询 ★<br>        子查询       √<br>        分页查询       ★<br>        union联合查询√</p><pre><code>六、DML语言的学习    ★                 插入语句    修改语句    删除语句七、DDL语言的学习      库和表的管理 √    常见数据类型介绍  √              常见约束    √八、TCL语言的学习    事务和事务处理                 九、视图的讲解           √十、变量                      十一、存储过程和函数   十二、流程控制结构       </code></pre><p>##数据库的好处<br>    1.持久化数据到本地<br>    2.可以实现结构化查询，方便管理</p><p>##数据库相关概念<br>    1、DB：数据库，保存一组有组织的数据的容器<br>    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><p>##数据库存储数据的特点<br>    1、将数据放到表中，表再放到库中<br>    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>    5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><p>##MySQL产品的介绍和安装</p><p>###MySQL服务的启动和停止<br>    方式一：计算机——右击管理——服务<br>    方式二：通过管理员身份运行<br>    net start 服务名（启动服务）<br>    net stop 服务名（停止服务）</p><p>###MySQL服务的登录和退出<br>    方式一：通过mysql自带的客户端<br>    只限于root用户</p><pre><code>方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C</code></pre><p>###MySQL的常见命令 </p><pre><code>1.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名(    列名 列类型,    列名 列类型，    。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V</code></pre><p>###MySQL的语法规范<br>    1.不区分大小写,但建议关键字大写，表名、列名小写<br>    2.每条命令最好用分号结尾<br>    3.每条命令根据需要，可以进行缩进 或换行<br>    4.注释<br>        单行注释：#注释文字<br>        单行注释：– 注释文字<br>        多行注释：&#x2F;* 注释文字  *&#x2F;</p><p>###SQL的语言分类<br>    DQL（Data Query Language）：数据查询语言<br>        select<br>    DML(Data Manipulate Language):数据操作语言<br>        insert 、update、delete<br>    DDL（Data Define Languge）：数据定义语言<br>        create、drop、alter<br>    TCL（Transaction Control Language）：事务控制语言<br>        commit、rollback</p><p>###SQL的常见命令</p><pre><code>show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,    字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据</code></pre><p>##DQL语言的学习<br>###进阶1：基础查询<br>    语法：<br>    SELECT 要查询的东西<br>    【FROM 表名】;</p><pre><code>类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数</code></pre><p>###进阶2：条件查询<br>    条件查询：根据条件过滤原始表的数据，查询到想要的数据<br>    语法：<br>    select<br>        要查询的字段|表达式|常量值|函数<br>    from<br>        表<br>    where<br>        条件 ;</p><pre><code>分类：一、条件表达式    示例：salary&gt;10000    条件运算符：    &gt; &lt; &gt;= &lt;= = != &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符：    and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false    or(||)：两个条件只要有一个成立，结果为true，否则为false    not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like &#39;a%&#39;</code></pre><p>###进阶3：排序查询</p><pre><code>语法：select    要查询的东西from    表where     条件order by 排序的字段|表达式|函数|别名 【asc|desc】</code></pre><p>###进阶4：常见函数<br>    一、单行函数<br>    1、字符函数<br>        concat拼接<br>        substr截取子串<br>        upper转换成大写<br>        lower转换成小写<br>        trim去前后指定的空格和字符<br>        ltrim去左边空格<br>        rtrim去右边空格<br>        replace替换<br>        lpad左填充<br>        rpad右填充<br>        instr返回子串第一次出现的索引<br>        length 获取字节个数</p><pre><code>2、数学函数    round 四舍五入    rand 随机数    floor向下取整    ceil向上取整    mod取余    truncate截断3、日期函数    now当前系统日期+时间    curdate当前系统日期    curtime当前系统时间    str_to_date 将字符转换成日期    date_format将日期转换成字符4、流程控制函数    if 处理双分支    case语句 处理多分支        情况1：处理等值判断        情况2：处理条件判断    5、其他函数    version版本    database当前库    user当前连接用户</code></pre><p>二、分组函数</p><pre><code>    sum 求和    max 最大值    min 最小值    avg 平均值    count 计数    特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型        max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：        字段、*、常量值，一般放1       建议使用 count(*)</code></pre><p>##进阶5：分组查询<br>    语法：<br>    select 查询的字段，分组函数<br>    from 表<br>    group by 分组的字段</p><pre><code>特点：1、可以按单个字段分组2、和分组函数一同查询的字段最好是分组后的字段3、分组筛选        针对的表位置关键字分组前筛选：原始表group by的前面where分组后筛选：分组后的结果集group by的后面having4、可以按多个字段分组，字段之间用逗号隔开5、可以支持排序6、having后可以支持别名</code></pre><p>##进阶6：多表连接查询</p><pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件</code></pre><p>一、传统模式下的连接 ：等值连接——非等值连接</p><pre><code>1.等值连接的结果 = 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能</code></pre><p>二、sql99语法：通过join关键字实现连接</p><pre><code>含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！</code></pre><p>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre><code>SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;</code></pre><p>sql92</p><pre><code>SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;</code></pre><p>##进阶7：子查询</p><p>含义：</p><pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空    ② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替</code></pre><p>##进阶8：分页查询</p><p>应用场景：</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre><code>select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;</code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page</code></pre><p>##进阶9：联合查询</p><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><p>##DML语言</p><p>###插入</p><p>语法：<br>    insert into 表名(字段名，…)<br>    values(值1，…);</p><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><p>###修改</p><p>修改单表语法：</p><pre><code>update 表名 set 字段=新值,字段=新值【where 条件】</code></pre><p>修改多表语法：</p><pre><code>update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件</code></pre><p>###删除</p><p>方式1：delete语句 </p><p>单表的删除： ★<br>    delete from 表名 【where 筛选条件】</p><p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p><p>方式2：truncate语句</p><pre><code>truncate table 表名</code></pre><p>两种方式的区别【面试题】</p><pre><code>#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚</code></pre><p>##DDL语句<br>###库和表的管理<br>库的管理：</p><pre><code>一、创建库create database 库名二、删除库drop database 库名</code></pre><p>表的管理：<br>    #1.创建表</p><pre><code>CREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME    );DESC studentinfo;#2.修改表 alter语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;#①修改字段名ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;#②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;#3.删除表DROP TABLE [IF EXISTS] studentinfo;</code></pre><p>###常见类型</p><pre><code>整型：    小数：    浮点型    定点型字符型：日期型：Blob类型：</code></pre><p>###常见约束</p><pre><code>NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY</code></pre><p>##数据库事务<br>###含义<br>    通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><p>###特点<br>    （ACID）<br>    原子性：要么都执行，要么都回滚<br>    一致性：保证数据的状态操作前和操作后保持一致<br>    隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>    持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p><p>相关步骤：</p><pre><code>1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务</code></pre><p>###事务的分类：</p><p>隐式事务，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p>显式事务，具有明显的开启和结束事务的标志</p><pre><code>    1、开启事务    取消自动提交事务的功能        2、编写事务的一组逻辑操作单元（多条sql语句）    insert    update    delete        3、提交事务或回滚事务</code></pre><p>###使用到的关键字</p><pre><code>set autocommit=0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点</code></pre><p>###事务的隔离级别:</p><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><p>设置隔离级别：</p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p>查看隔离级别：</p><pre><code>select @@tx_isolation;</code></pre><p>##视图<br>含义：理解成一张虚拟的表</p><p>视图和表的区别：</p><pre><code>    使用方式占用物理空间视图完全相同不占用，仅仅保存的是sql逻辑表完全相同占用</code></pre><p>视图的好处：</p><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><p>###视图的创建<br>    语法：<br>    CREATE VIEW  视图名<br>    AS<br>    查询语句;<br>###视图的增删改查<br>    1、查看视图的数据 ★</p><pre><code>SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name=&#39;Partners&#39;;2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);3、修改视图的数据UPDATE my_v4 SET last_name =&#39;梦姑&#39; WHERE last_name=&#39;虚竹&#39;;4、删除视图的数据DELETE FROM my_v4;</code></pre><p>###某些视图不能更新<br>    包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>    常量视图<br>    Select中包含子查询<br>    join<br>    from一个不能更新的视图<br>    where子句的子查询引用了from子句中的表<br>###视图逻辑的更新<br>    #方式一：<br>    CREATE OR REPLACE VIEW test_v7<br>    AS<br>    SELECT last_name FROM employees<br>    WHERE employee_id&gt;100;</p><pre><code>#方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7;</code></pre><p>###视图的删除<br>    DROP VIEW test_v1,test_v2,test_v3;<br>###视图结构的查看<br>    DESC test_v7;<br>    SHOW CREATE VIEW test_v7;</p><p>##存储过程</p><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数</code></pre><p>分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><p>###创建存储过程<br>语法：</p><pre><code>create procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end</code></pre><p>类似于方法：</p><pre><code>修饰符 返回类型 方法名(参数类型 参数名,...)&#123;    方法体;&#125;</code></pre><p>注意</p><pre><code>1、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出</code></pre><p>#调用存储过程<br>    call 存储过程名(实参列表)<br>##函数</p><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END</code></pre><p>###调用函数<br>    SELECT 函数名（实参列表）</p><p>###函数和存储过程的区别</p><pre><code>        关键字调用语法返回值应用场景函数FUNCTIONSELECT 函数()只能是一个一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程PROCEDURECALL 存储过程()可以有0个或多个一般用于更新</code></pre><p>##流程控制结构</p><p>###系统变量<br>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><pre><code>查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><pre><code>查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation=&#39;read-uncommitted&#39;;SET SESSION tx_isolation=&#39;read-committed&#39;;</code></pre><p>###自定义变量<br>一、用户变量</p><p>声明并初始化：</p><pre><code>SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select @变量名;</code></pre><p>二、局部变量</p><p>声明：</p><pre><code>declare 变量名 类型 【default 值】;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select 变量名</code></pre><p>二者的区别：</p><pre><code>        作用域定义位置语法</code></pre><p>用户变量当前会话会话的任何地方加@符号，不用指定类型<br>局部变量定义它的BEGIN END中 BEGIN END的第一句话一般不用加@,需要指定类型</p><p>###分支<br>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><pre><code>情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</code></pre><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><pre><code>if 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if;</code></pre><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>            应用场合<br>    if函数简单双分支<br>    case结构等值判断 的多分支<br>    if结构区间判断 的多分支</p><p>###循环</p><p>语法：</p><pre><code>【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;</code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##本单元目标&lt;br&gt;    一、为什么要学习数据库&lt;br&gt;    二、数据库的相关概念&lt;br&gt;        DBMS、DB、SQL&lt;br&gt;    三、数据库存储数据的特点&lt;br&gt;    四、初始MySQL&lt;br&gt;        MySQL产品的介绍&lt;br&gt;       </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zggnice.github.io/posts/undefined.html"/>
    <id>https://zggnice.github.io/posts/undefined.html</id>
    <published>2024-09-23T01:55:27.532Z</published>
    <updated>2024-09-23T01:55:27.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><p><img src="D:\思维导图\微信图片_20240923095137.png"></p><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li><p>类的定义(对象的抽象)</p><p>具有相同特征的事物的抽象描述</p></li><li><p>类的实例化(对象)</p><p>定义:实际存在的该类事物的每个个体，是具体的。<br>创建对象（在main方法中）格式:</p><ul><li><p>匿名对象</p><p>如果一个对象只进行一次方法调用，就可以用匿名对象。<br>例:new Person().shout() 定义了一个Person类的匿名对象并调用了shout方法。</p></li><li><p>对象的内存解析</p><p>凡是new出来的结构(对象,数组)都放在堆空间中。</p></li><li><p>对象数组</p><p>当数组元素是引用类型中的类的实例化时，我们称为对象数组。<br>类名 []数组名 &#x3D;new 类名[n]；<br>后通过循环遍历为数组元素初始化，例:数组名[i]&#x3D;new 类名（）;</p></li></ul></li><li><p>类的成员概述</p><ul><li><p>属性（成员变量）</p><p>此时说的是实例变量（不以static修饰）</p><ul><li><p>声明格式</p><p>数据类型 变量名 ＝ 初始化值</p></li><li><p>成员变量与局部变量比较</p><ul><li><p>成员变量</p><p>声明在方法体外，类体内</p></li><li><p>局部变量</p><p>声明在方法体内部等位置</p></li></ul></li><li><p>分类</p><ul><li><p>实例变量</p><p>随着对象的创建而加载。每个对象拥有一份实例变量。<br>只有对象能调用</p></li><li><p>静态变量</p></li></ul></li></ul></li><li><p>行为（（成员）方法&#x2F;函数）</p><p>无返回值，则声明:void<br>有返回值，则声明出返回值类型，与方法体中”return”返回值搭配使用</p><ul><li><p>return关键字的使用</p><p>作用1:结束一个方法(通过条件判断语句结束方法)<br>作用2:结束一个方法的同时，可以返回数据给方法的调用者<br>注:在return关键字的直接后面不能声明执行语句</p></li><li><p>方法的重载</p><p>同一个类中，方法名相同，但参数个数&#x2F;参数类型不同，与修饰符，返回值类型无关。</p></li><li><p>可变个数的形参</p><p>格式:方法名（参数的类型名 …参数名）<br>相当于在方法中传入了一个数组，在调用该方法时，传入数组的元素，就相当于传入多个参数</p></li><li><p>方法的参数传递机制</p><ul><li><p>形参和实参</p><ul><li><p>形参</p><p>定义方法时（）中的参数</p></li><li><p>实参</p><p>调用方法时写入（）的参数</p></li></ul></li><li><p>值传递</p><ul><li><p>数据值（基本数据类型）</p></li><li><p>地址值（引用数据类型）</p></li></ul></li></ul></li></ul></li><li><p>构造器</p><p>一般用快捷键创建</p><ul><li><p>构造器的作用</p><p>1搭配new关键字，创建类的对象<br>2在创建对象时，为实例变量赋值<br>类默认有一个空参构造器<br>例:Person p&#x3D;new Person(3,”zgg”)<br>3可以声明多个构造器</p></li></ul></li><li><p>代码块</p></li></ul></li><li><p>面向对象完成功能的三步骤</p><ul><li><p>1类的定义（class关键字）</p></li><li><p>2对象的创建</p><p>单独在一个新类的main中创建<br>格式:类名 对象名 &#x3D; new 类名（）;<br>例:Person  p &#x3D; new Person,创建了类Person的一个名为p的对象</p></li><li><p>3对象调用属性或方法</p><p>格式<br>对象名.属性&#x2F;对象名.方法名</p></li></ul></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>package（包）</p></li><li><p>import（导入）</p></li></ul><h3 id="面向对象特征一-封装性"><a href="#面向对象特征一-封装性" class="headerlink" title="面向对象特征一:封装性"></a>面向对象特征一:封装性</h3><p>把该隐藏的隐藏起来，该暴露的暴露出来</p><ul><li><p>封装性的体现</p><ul><li><p>成员变量&#x2F;属性私有化</p><p>设置为private,提供get和set方法(可以使用快捷键创建)</p></li><li><p>私有化方法</p><p>方法声明为private</p></li></ul></li><li><p>四种权限修饰符</p><p>private， 缺省（默认），protected,public</p></li></ul><h3 id="阶段性知识补充"><a href="#阶段性知识补充" class="headerlink" title="阶段性知识补充"></a>阶段性知识补充</h3><ul><li><p>类中属性赋值过程</p></li><li><p>JavaBean</p><p>符合如下标准的Java类<br>类是公共的<br>有一个无参的构造器<br>有属性，且有对应的get,set方法</p></li><li><p>UML 类图</p><p>+:public<br>-:private<br>#:protected</p></li></ul><h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><h3 id="关键字-1"><a href="#关键字-1" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>this</p><ul><li><p>定义</p><p>表示为:<br>当前正在初始化的对象(在构造器中)<br>当前调用该方法的对象（在方法中调用）</p></li><li><p>使用</p><ul><li><p>区分同名的成员变量和局部变量</p></li><li><p>同一个类中构造器互相调用</p><p>this():调用本类的无参构造器<br>this(实参列表):调用本类的有参构造器<br>都只能声明在构造器首行，因此二者不可兼得</p></li></ul></li></ul></li><li><p>super</p><ul><li><p>作用</p><p>避开子父类中同名的成员变量<br>引用父类声明的成员</p></li><li><p>使用</p><ul><li><p>子类中调用父类被重写的方法</p></li><li><p>子类中调用父类中同名的成员变量</p></li><li><p>子类构造器中调用父类构造器</p><p>super(形参列表)<br>子类默认调用父类空参的super()<br>必须声明在构造器的首行，与this二者不可兼得</p></li></ul></li></ul></li><li><p>instanceof</p><p>搭配if判断语句</p></li></ul><h3 id="面向对象特征二-继承（extend）"><a href="#面向对象特征二-继承（extend）" class="headerlink" title="面向对象特征二:继承（extend）"></a>面向对象特征二:继承（extend）</h3><p>子类会继承父类中所有的实例变量和实例方法<br>子类不能直接访问父类中的私有的（private）成员变量和方法<br>单继承<br>子类可以有自己独特的内容<br>属性不具有重写</p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>子类的重写的方法必须和父类被重写的方法具有相同的方法名称，参数列表。</p><h3 id="子类对象实例化全过程"><a href="#子类对象实例化全过程" class="headerlink" title="子类对象实例化全过程"></a>子类对象实例化全过程</h3><p>new→造对象<br>构造器→初始化</p><h3 id="面向对象特征三-多态性"><a href="#面向对象特征三-多态性" class="headerlink" title="面向对象特征三:多态性"></a>面向对象特征三:多态性</h3><p>父类的引用指向子类的对象<br>格式:父类类型 变量名&#x3D;子类对象<br>适用性:适用于方法，不适用于属性<br>编译看左，运行看右</p><ul><li><p>类型转换</p><ul><li><p>向上转型（多态）</p><p>左父右子</p></li><li><p>向下转型</p><p>左子右父</p></li></ul></li></ul><h3 id="Object类的使用（根父类）"><a href="#Object类的使用（根父类）" class="headerlink" title="Object类的使用（根父类）"></a>Object类的使用（根父类）</h3><p>Object类是所有类的父类</p><ul><li><p>方法</p><ul><li><p>equals()</p><p>所有类都可以重写<br>只能比较引用类型<br>判断是否相等<br>格式:obj1.equals(obj2)</p><ul><li>equals()与”＝”的区别</li></ul></li><li><p>toString()</p><p>返回对象的相关属性，搭配输出语句进行打印</p></li><li><p>clone()</p><p>复制的相当与创建一个新的空间</p></li><li><p>finalize()</p><p>当对象被回收，系统自动调用该对象的finalize()方法</p></li><li><p>getClass</p><p>获取对象运行时类型</p></li><li><p>hashCode()</p><p>返回每个对象的hash值</p></li></ul></li><li><p>native关键字</p></li></ul><h2 id="面向对象高级"><a href="#面向对象高级" class="headerlink" title="面向对象高级"></a>面向对象高级</h2><h3 id="关键字-2"><a href="#关键字-2" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>static</p><ul><li><p>静态变量（类变量）</p><p>随着类的加载而加载，由于类只加载一次，所以静态变量只有一份。<br>类和对象都可以调用<br>调用方法:类名.变量名</p></li><li><p>静态方法（类方法）</p><p>可以被继承，不能被重写。<br>调用方法:类名.方法名</p></li><li><p>特点</p><p>随着类的加载而加载<br>优先于对象存在<br>修饰的成员，被所有对象所共享<br>访问权限允许时，可以不创建对象，直接被类调用</p></li></ul></li><li><p>final</p><ul><li><p>使用</p><ul><li><p>final修饰类</p><p>这个类不能被继承，没有子类</p></li><li><p>final修饰方法</p><p>这个方法不能被子类重写</p></li><li><p>final修饰变量</p><p>一旦赋值，值就不能被修改，即常量</p></li></ul></li></ul></li><li><p>abstract</p><ul><li><p>抽象类</p><p>包含抽象方法的类一定是抽象类<br>不能实例化，但能被继承<br>子类必须重写父类中的所有方法，否则子类仍为抽象类</p></li><li><p>抽象方法</p><p>没有方法体，适用于不知道具体内容，由子类重写。<br>不能被调用</p></li></ul></li><li><p>interface</p><ul><li><p>接口</p><p>接口就是规范，定义的是一组规则<br>属性:必须使用public  static final<br>方法:声明抽象方法，修饰为public abstract</p><ul><li><p>使用规则</p><ul><li><p>类实现接口</p></li><li><p>接口的多实现</p></li><li><p>接口的多继承</p></li><li><p>接口与实现类对象构成多态引用</p></li><li><p>使用接口的静态成员</p></li><li><p>使用接口的非静态方法</p></li></ul></li></ul></li></ul></li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>对某个类只能存在一个对象实例时</p><ul><li><p>饿汉式</p><p>立即加载</p></li><li><p>懒汉式</p><p>延迟加载<br>存在线程不安全问题</p></li><li><p>创建步骤</p><p>私有化构造器<br>内部提供一个当前类的实例<br> 4.此实例也必须静态化<br> 3.提供公共的静态的方法，返回当前类的对象</p></li></ul><h3 id="理解main方法的语法"><a href="#理解main方法的语法" class="headerlink" title="理解main方法的语法"></a>理解main方法的语法</h3><p>看做是一个普通的静态方法。<br>看做是程序的入口，格式是固定的。</p><h3 id="类的成员之四-代码块"><a href="#类的成员之四-代码块" class="headerlink" title="类的成员之四:代码块"></a>类的成员之四:代码块</h3><ul><li><p>静态代码块</p><p>被static修饰<br>加载类的时候，直接执行，不用调用</p></li><li><p>非静态代码块</p><p>没有被static<br>与对象有关，对象创建后，不用调用直接执行，创建几个对象，执行几次</p></li></ul><h3 id="实例变量赋值顺序"><a href="#实例变量赋值顺序" class="headerlink" title="实例变量赋值顺序"></a>实例变量赋值顺序</h3><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li><p>成员内部类</p><p>直接声明在外部类的里面</p><ul><li><p>静态成员内部类</p><p>使用static修饰</p></li><li><p>非静态成员内部类</p></li></ul></li><li><p>局部内部类</p><p>声明在方法内，构造器内，代码块内</p><ul><li><p>非匿名局部内部类</p></li><li><p>匿名局部内部类</p></li></ul></li></ul><h3 id="枚举类-enum"><a href="#枚举类-enum" class="headerlink" title="枚举类(enum)"></a>枚举类(enum)</h3><p>必须在枚举类的开头声明多个对象，对象之间使用“，”隔开</p><h3 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h3><ul><li><p>与注释的区别</p></li><li><p>元注释</p><p>对现有的注解进行解释说明的注解</p></li><li><p>自定义注释</p></li><li><p>测试</p><ul><li><p>黑盒测试</p></li><li><p>白盒测试</p><ul><li>JUnit单元测试</li></ul></li></ul></li></ul><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>为了使得基本数据类型的变量具备引用数据类型变量的相关特征（eg:封装性，继承性，多态性）</p><ul><li><p>包装类与基本数据类型间的转换</p><ul><li><p>装箱</p><p>基本数值→包装对象</p></li><li><p>拆箱</p><p>包装对象→基本数值</p></li></ul></li><li><p>基本数据类型、包装类与字符串间的转换</p><ul><li><p>基本数据类型转为字符串</p></li><li><p>字符串转为基本数据类型</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java面向对象&quot;&gt;&lt;a href=&quot;#Java面向对象&quot; class=&quot;headerlink&quot; title=&quot;Java面向对象&quot;&gt;&lt;/a&gt;Java面向对象&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;D:&#92;思维导图&#92;微信图片_20240923095137.png&quot;&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zggnice.github.io/posts/undefined.html"/>
    <id>https://zggnice.github.io/posts/undefined.html</id>
    <published>2024-08-21T09:33:54.380Z</published>
    <updated>2024-09-23T07:44:59.301Z</updated>
    
    <content type="html"><![CDATA[<p>大千世界，无奇不有。我陈平安，唯有一剑，可搬山，倒海，降妖，镇魔，敕神，摘星，断江，摧城， 开天！</p><p>陈平安，记住，以后不管遇到什么，都不要对这个世界失望！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大千世界，无奇不有。我陈平安，唯有一剑，可搬山，倒海，降妖，镇魔，敕神，摘星，断江，摧城， 开天！&lt;/p&gt;
&lt;p&gt;陈平安，记住，以后不管遇到什么，都不要对这个世界失望！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>斗破</title>
    <link href="https://zggnice.github.io/posts/c1a85fc8.html"/>
    <id>https://zggnice.github.io/posts/c1a85fc8.html</id>
    <published>2024-07-12T10:58:17.000Z</published>
    <updated>2024-07-12T11:07:02.701Z</updated>
    
    <content type="html"><![CDATA[<p>  年少轻狂的那些岁月，沉淀下来的是那些再也回不到的过去，而总让人感叹的，则是未曾珍惜而失去的那些，因为年少轻狂的岁月一生也只有一次，世间最珍贵的不是得不到和已失去的，而是现在把握的。我们生活在一个复杂而又充满无奈的世界，身上背负了太多太多的责任和使命，有时候我们处理不当就会不堪重负难以忍受，最宽阔的是海洋，比海洋更宽阔的是天空，比天空更宽阔的是人的胸怀。当你紧握双手里面什么也没有，当你打开双手，世界就在你手中。</p><p><img src="https://13792cd5.telegraph-image-eur.pages.dev/file/0178db9210b36dfe6a89c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  年少轻狂的那些岁月，沉淀下来的是那些再也回不到的过去，而总让人感叹的，则是未曾珍惜而失去的那些，因为年少轻狂的岁月一生也只有一次，世间最珍贵的不是得不到和已失去的，而是现在把握的。我们生活在一个复杂而又充满无奈的世界，身上背负了太多太多的责任和使命，有时候我们处理不当就</summary>
      
    
    
    
    
    <category term="语录" scheme="https://zggnice.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>强风吹拂</title>
    <link href="https://zggnice.github.io/posts/8c83a0fc.html"/>
    <id>https://zggnice.github.io/posts/8c83a0fc.html</id>
    <published>2024-07-01T00:42:23.000Z</published>
    <updated>2024-07-01T00:47:15.627Z</updated>
    
    <content type="html"><![CDATA[<p>长跑的目标不是更快，而是更强。<br>“明明这么痛苦，这么难过，为什么就是不能放弃跑步？<br>因为全身细胞都在蠢蠢欲动，想要感受强风迎面吹拂的滋味。”</p><p><img src="https://13792cd5.telegraph-image-eur.pages.dev/file/91d20cca30012d576b8e9.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;长跑的目标不是更快，而是更强。&lt;br&gt;“明明这么痛苦，这么难过，为什么就是不能放弃跑步？&lt;br&gt;因为全身细胞都在蠢蠢欲动，想要感受强风迎面吹拂的滋味。”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://13792cd5.telegraph-image-eur.pages.</summary>
      
    
    
    
    
    <category term="运动坚持" scheme="https://zggnice.github.io/tags/%E8%BF%90%E5%8A%A8%E5%9D%9A%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>驼峰命名</title>
    <link href="https://zggnice.github.io/posts/b0283f36.html"/>
    <id>https://zggnice.github.io/posts/b0283f36.html</id>
    <published>2024-06-29T14:06:40.000Z</published>
    <updated>2024-06-29T14:16:53.804Z</updated>
    
    <content type="html"><![CDATA[<p>标识符命名规则（见名知意）<br>①小驼峰命名法：方法、变量<br>规范1：标识符是一个单词的时候，全部小写<br>范例1:name<br>规范2：由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写<br>范例2:first Name<br>②大驼峰命名法：类名<br>规范：标识符是个单词的时候，首字母大写<br>范例1:Student<br>规范2：标识符由多个单词组成的时候，每个单词的首字母大写。<br>范例2:GoodStudent</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标识符命名规则（见名知意）&lt;br&gt;①小驼峰命名法：方法、变量&lt;br&gt;规范1：标识符是一个单词的时候，全部小写&lt;br&gt;范例1:name&lt;br&gt;规范2：由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写&lt;br&gt;范例2:first Name&lt;br&gt;②大驼峰命名法：类名</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原神语录</title>
    <link href="https://zggnice.github.io/posts/749f82c4.html"/>
    <id>https://zggnice.github.io/posts/749f82c4.html</id>
    <published>2024-06-17T07:02:09.000Z</published>
    <updated>2024-06-17T07:24:12.653Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.picui.cn/free/2024/06/17/666fe3e00d535.jpg"></p><p>1．若你困于无风之地，我将奏响高天之歌。2．最初的鸟儿是不会飞翔的，飞翔是它们勇于跌落山谷的奖励。<br>3．正是因为无法更改，无法违逆，只能接受，命运才被称之为命运。<br>4．曲高未必人不识，自有知音和清词。5．世上没有什么巧合，一切都是在永远的过去埋下种子。<br>6．即使只是片刻的火花，也能在仰望黑夜的人心中，留下久久不灭的美丽光芒。7．烟花易逝，人情长存。<br>8．这世界上没有纯粹的自由，风也会有吹到尽头的时候。<br>9．天高散孤云，落日澄空故乡影，飘摇游子心。<br>10．只要坚信自己的道路，就无所谓天气是晴是雨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.picui.cn/free/2024/06/17/666fe3e00d535.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;1．若你困于无风之地，我将奏响高天之歌。2．最初的鸟儿是不会飞翔的，飞翔是它们勇于跌落山谷的奖励。&lt;br&gt;3．正是因为无法更改</summary>
      
    
    
    
    
    <category term="双子" scheme="https://zggnice.github.io/tags/%E5%8F%8C%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>语录</title>
    <link href="https://zggnice.github.io/posts/undefined.html"/>
    <id>https://zggnice.github.io/posts/undefined.html</id>
    <published>2024-06-17T02:39:46.000Z</published>
    <updated>2024-06-17T07:24:07.003Z</updated>
    
    <content type="html"><![CDATA[<p>孤独和累是登顶前的常态，不要放弃。<br>人生是旷野，不是所有的游荡都意味着迷失。</p><p><img src="https://img.picui.cn/free/2024/06/16/666e90fe14c53.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;孤独和累是登顶前的常态，不要放弃。&lt;br&gt;人生是旷野，不是所有的游荡都意味着迷失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.picui.cn/free/2024/06/16/666e90fe14c53.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="努力加油！" scheme="https://zggnice.github.io/tags/%E5%8A%AA%E5%8A%9B%E5%8A%A0%E6%B2%B9%EF%BC%81/"/>
    
  </entry>
  
  <entry>
    <title>天罡赋</title>
    <link href="https://zggnice.github.io/posts/3874b773.html"/>
    <id>https://zggnice.github.io/posts/3874b773.html</id>
    <published>2024-06-16T11:02:19.000Z</published>
    <updated>2024-06-16T11:30:12.529Z</updated>
    
    <content type="html"><![CDATA[<p>   世间万物，风云变幻，苍黄翻覆。纵使波谲云诡，但制心一处，便无事不办。天定胜人，人定兮胜天。<br>    天下尽做饵，唯本帅执竿。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警示昭宗。臣无不是为大唐，这其中多少苦心，多少苦难，本帅始终不曾停下脚步，却因为你，踌躇了数十年!</p><p><img src="https://img.picui.cn/free/2024/06/16/666ecc844904e.jpg" alt=" 背景图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;   世间万物，风云变幻，苍黄翻覆。纵使波谲云诡，但制心一处，便无事不办。天定胜人，人定兮胜天。&lt;br&gt;    天下尽做饵，唯本帅执竿。三百年光阴，京师长安到东都洛阳兴亡起伏，从鼓动杨广大兴师旅到造就贞观之治，渭水之盟到大败突厥、废王立武到二圣临朝，谋天宝之乱到纵黄巢造反警</summary>
      
    
    
    
    
  </entry>
  
</feed>
